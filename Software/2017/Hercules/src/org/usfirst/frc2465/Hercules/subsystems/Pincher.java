// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Hercules.subsystems;

import org.usfirst.frc2465.Hercules.RobotMap;
import org.usfirst.frc2465.Hercules.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Pincher extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid fingers = RobotMap.pincherFingers;
    private final DoubleSolenoid tilter = RobotMap.pincherTilter;
    private final DoubleSolenoid ejector = RobotMap.pincherEjector;
    private final AnalogInput gearDetector = RobotMap.pincherGearDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new OpenPincher());
    	setDefaultCommand(new TiltPincherD());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void openPincher(){
    	fingers.set(Value.kForward);
    }
    
    public void closePincher(){
    	fingers.set(Value.kReverse);
    }
    
    public void tiltUpPincher(){
    	tilter.set(Value.kForward);
    }
    
    public void tiltDownPincher(){
    	tilter.set(Value.kReverse);
    }
    
    public void deployEjector(){
    	ejector.set(Value.kForward);
    }
    
    public void retractEjector(){
    	ejector.set(Value.kReverse);
    }
}

