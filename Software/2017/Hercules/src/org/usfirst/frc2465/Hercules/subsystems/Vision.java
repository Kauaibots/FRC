// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Hercules.subsystems;

import org.usfirst.frc2465.Hercules.Robot;
import org.usfirst.frc2465.Hercules.RobotMap;
import org.usfirst.frc2465.Hercules.commands.MiddlePeg;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Timer;



/**
 *
 */
public class Vision extends Subsystem {

    private final Relay relay = RobotMap.visionRingLightRelay;
    boolean changed;
	boolean shouldBeRunning;
	boolean sendTime;

    
    public float previousX = getCurrentX();
    public float previousY = getCurrentY();
    public float previousZ = getCurrentZ();
   
    public double gameTime = 0.0;
    public double wantedTime = 10.0;

    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public Vision() {
    	turnOnLight();
    	didChange();
    }
    
    public boolean didChange(){

    	if(previousX != getCurrentX() || previousY != getCurrentY() || previousZ != getCurrentZ()){
    		changed = true;
    		previousX = getCurrentX();
    		previousY = getCurrentY();
    		previousZ = getCurrentZ();
    	}
    	else{
    		changed = false;
    	}
    	return changed;
    }
    
    public float getCurrentX(){
    	float x = (float) Robot.table.getNumber("x", 0);
    	return x;
    }
    
    public float getCurrentY(){
    	float y = (float) Robot.table.getNumber("y", 0);
    	return y;
    }
    
    public float getCurrentZ(){
    	float z = (float) Robot.table.getNumber("z", 0);
    	return z;
    }
    
    public boolean seePeg(){
    	boolean sees = Robot.table.getBoolean("Sees?", false);
    	return sees;
    }
    
    
    public void turnOnLight(){
  	   relay.set(Value.kForward);
    }
    

    public boolean sendTime(){
    	gameTime = Timer.getMatchTime();
    	if(gameTime <= wantedTime){ //155
    		sendTime = true;
    	}
    	else{
    		sendTime = false;
    	}
    	if(sendTime == true){
    		shouldBeRunning = false;
    	}
    	else{
    		shouldBeRunning = true;
    	}
    	return shouldBeRunning;
    }
    
    
   
}

