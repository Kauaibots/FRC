// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.DriveMule;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

import org.usfirst.frc2465.DriveMule.subsystems.AngleSensor;
import org.usfirst.frc2465.DriveMule.subsystems.LidarLITE;
import org.usfirst.frc2465.DriveMule.subsystems.MaxbotixSensor;
import org.usfirst.frc2465.DriveMule.subsystems.ProximitySensor;

import com.ctre.CANTalon;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */

/* Scott Libert, 2/23/2016:  Updated to work w/competition robot on stop-build day. */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AHRS imu;
    public static CANTalon driveLeftFrontSC;
    public static CANTalon driveRightFrontSC;
    public static CANTalon driveLeftRearSC;
    public static CANTalon driveRightRearSC;
    public static RobotDrive robotDrive;   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            driveLeftFrontSC = new CANTalon(1);
            LiveWindow.addActuator("Drive", "LeftFrontSC", driveLeftFrontSC);
        } catch (Exception ex) {
            ex.printStackTrace();
        }	
        
        try { 
            driveRightFrontSC = new CANTalon(2);
            LiveWindow.addActuator("Drive", "RightFrontSC", driveRightFrontSC);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
	        
        try { 
            driveRightRearSC = new CANTalon(3);
            LiveWindow.addActuator("Drive", "RightRearSC", driveRightRearSC);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        try { 
            driveLeftRearSC = new CANTalon(4);
            LiveWindow.addActuator("Drive", "LeftRearSC", driveLeftRearSC);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        
        
        try {
	        robotDrive = new RobotDrive(driveLeftFrontSC, driveLeftRearSC,
	              driveRightFrontSC, driveRightRearSC);
	        robotDrive.setSafetyEnabled(true);
	        robotDrive.setExpiration(0.1);
	        robotDrive.setSensitivity(0.5);
	        robotDrive.setMaxOutput(1.0);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try {
            imu = new AHRS(SPI.Port.kMXP);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if ( imu != null ) {
            LiveWindow.addSensor("IMU", "Gyro", imu);
        }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
