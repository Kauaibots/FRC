// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.DriveMule;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2465.DriveMule.subsystems.Drive;
import org.usfirst.frc2465.DriveMule.commands.*;
import org.usfirst.frc2465.DriveMule.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser<Command> autoChooser;
    public static Drive drive;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    Alliance alliance;
    boolean teleop_countdown;
    
    public enum RobotPosition {
        kFlat(0),
        kOn_Ramp(1),
        kSkewed(2);
        
        private int value;
        
        private RobotPosition(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }
    }    
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        Robot.drive = new Drive();        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = null;
        autoChooser = new SendableChooser<Command>();
        autoChooser.addDefault("RockyTerrain", new RockyTerrain());
        SmartDashboard.putData("Autonomous Chooser", autoChooser);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    public void enableVisionProcessing() {
        /* Configure vision processing algorithm based upon current alliance. */
        /* Red Alliance:  Detect Blue Lights on Shield/Tower. */
        /* Blue Alliance:  Detect Red Lights on Shield/Tower. */
        /* NOTE:  In both cases, retro-reflective target tracking is performed. */
        
        alliance = DriverStation.getInstance().getAlliance();
    }
    
    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommand = (Command) autoChooser.getSelected();
        if(autonomousCommand != null){
        	autonomousCommand.start();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        enableVisionProcessing();
        double seconds_remaining = DriverStation.getInstance().getMatchTime();
        if ( seconds_remaining > 15 ) {
        	teleop_countdown = true;
        } else {
        	teleop_countdown = false;
        }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
        double seconds_remaining = DriverStation.getInstance().getMatchTime();
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void updateDashboard() {
        // Drive
        if(RobotMap.imu != null)
        {
	    	SmartDashboard.putBoolean("IMU_Connected",      RobotMap.imu.isConnected());
	        SmartDashboard.putNumber( "IMU_Yaw",            RobotMap.imu.getYaw());
	        SmartDashboard.putNumber( "IMU_CompassHeading", RobotMap.imu.getCompassHeading());
	        SmartDashboard.putNumber("Pitch_X", RobotMap.imu.getPitch());
	        SmartDashboard.putNumber("Roll_Y", RobotMap.imu.getRoll());
        }
        
        if(Robot.drive != null)
        {
        	SmartDashboard.putBoolean("FOD_Enabled",        Robot.drive.getFODEnabled() );
        }       
    }
}
