// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.StrongholdBot16.subsystems;

import org.usfirst.frc2465.StrongholdBot16.Robot;
import org.usfirst.frc2465.StrongholdBot16.RobotMap;
import org.usfirst.frc2465.StrongholdBot16.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class BallControl extends Subsystem {
	double start_time = 0;
	double timePeriod = 0;
	
	double exhaleSpeed = 0.25;
	double inhaleSpeed = exhaleSpeed * -1;
	double holdBreath = 0;
	
	VictorSP motorController = RobotMap.ballGrabSpeedController;
	ProximitySensor ballDistance = RobotMap.infraredBallGrabberSensor;
	
	public BallControl(){
		motorController.set(0);
		ballDistance.getDistanceInches();
		
	}
	
	public boolean isBallPresent(){
		double inches = ballDistance.getDistanceInches();
		boolean present = false;
		if((inches >= 6.0) && (inches <= 16.0)){
		present = true;
		}
		return(present);
	}
	public boolean checkTime(){
		if(start_time!= 0){
			if((Timer.getFPGATimestamp() - start_time) > timePeriod){
				hold();
				start_time = 0;
				return true;
			}
		}
		return false;
	}
	
	public void ballMotorExtend(double time){ //gives the ball grabber extra motor time
		timePeriod = time;
		start_time = Timer.getFPGATimestamp();
	}
	public void exhale(){
			motorController.set(exhaleSpeed);
			ballMotorExtend(0.5);
		}
	public void inhale(){
			motorController.set(inhaleSpeed);
			ballMotorExtend(0.125);
		}
	public void hold(){
			motorController.set(holdBreath);
		}
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

