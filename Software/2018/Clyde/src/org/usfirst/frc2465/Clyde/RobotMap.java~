// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Clyde;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTalon1;
    public static CANTalon driveTalon2;
    public static CANTalon driveTalon3;
    public static CANTalon driveTalon4;
    public static RobotDrive driveController;
    public static AnalogGyro driveReplaceThisGyro;
    public static Encoder elevatorEncoder;
    public static DigitalInput elevatorBottomSwitch;
    public static DigitalInput elevatorTopSwitch;
    public static CANTalon elevatorMotorTalon;
    public static Relay clawClawMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTalon1 = new CANTalon(1);
        LiveWindow.addActuator("Drive", "Talon1", driveTalon1);
        
        driveTalon2 = new CANTalon(2);
        LiveWindow.addActuator("Drive", "Talon2", driveTalon2);
        
        driveTalon3 = new CANTalon(3);
        LiveWindow.addActuator("Drive", "Talon3", driveTalon3);
        
        driveTalon4 = new CANTalon(4);
        LiveWindow.addActuator("Drive", "Talon4", driveTalon4);
        
        driveController = new RobotDrive(driveTalon1, driveTalon2,
              driveTalon3, driveTalon4);
        
        driveController.setSafetyEnabled(true);
        driveController.setExpiration(0.1);
        driveController.setSensitivity(0.5);
        driveController.setMaxOutput(1.0);
        driveController.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveController.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveReplaceThisGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drive", "ReplaceThisGyro", driveReplaceThisGyro);
        driveReplaceThisGyro.setSensitivity(0.007);
        elevatorEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Encoder", elevatorEncoder);
        elevatorEncoder.setDistancePerPulse(1.0);
        elevatorEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorBottomSwitch = new DigitalInput(2);
        LiveWindow.addSensor("Elevator", "BottomSwitch", elevatorBottomSwitch);
        
        elevatorTopSwitch = new DigitalInput(3);
        LiveWindow.addSensor("Elevator", "TopSwitch", elevatorTopSwitch);
        
        elevatorMotorTalon = new CANTalon(5);
        LiveWindow.addActuator("Elevator", "MotorTalon", elevatorMotorTalon);
        
        clawClawMotor = new Relay(0);
        LiveWindow.addActuator("Claw", "ClawMotor", clawClawMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
