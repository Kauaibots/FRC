// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2465.Clyde;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SPI;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AHRS imu;
    public static DoubleSolenoid leftGearShift;
    public static DoubleSolenoid rightGearShift;
    public static WPI_TalonSRX talon1;
    public static WPI_TalonSRX talon2;
    public static WPI_TalonSRX talon3;
    public static WPI_TalonSRX talon4;
    public static SpeedControllerGroup m_left;
    public static SpeedControllerGroup m_right;
    public static DifferentialDrive robotDrive;
    public static DigitalInput elevatorBottomSwitch;
    public static DigitalInput elevatorTopSwitch;
    public static WPI_TalonSRX elevatorMotor;
    public static DoubleSolenoid clawPiston;
    public static PWMVictorSPX clawMotor1;
    public static PWMVictorSPX clawMotor2;
    public static SpeedControllerGroup clawMotors;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //leftGearShift = new DoubleSolenoid(5, 2, 3);
       // LiveWindow.addActuator("Drive", "LeftGearShift", leftGearShift);
        
        //rightGearShift = new DoubleSolenoid(5, 4, 5);
        //LiveWindow.addActuator("Drive", "RightGearShift", rightGearShift);
        
        try {
            imu = new AHRS(SPI.Port.kMXP);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if ( imu != null ) {
            LiveWindow.addSensor("IMU", "Gyro", imu);
        }
        
        talon1 = new WPI_TalonSRX(1);        
        talon2 = new WPI_TalonSRX(2);
        talon1.setSensorPhase(false);
        SpeedControllerGroup m_left = new SpeedControllerGroup(talon1, talon2);
        m_left.setInverted(false);
        
        
        talon3 = new WPI_TalonSRX(3);
        talon4 = new WPI_TalonSRX(4);
        talon3.setSensorPhase(false);
        SpeedControllerGroup m_right = new SpeedControllerGroup(talon3, talon4);
        m_right.setInverted(false);
        
        robotDrive = new DifferentialDrive(m_left, m_right);
        
        robotDrive.setSafetyEnabled(false);
        robotDrive.setExpiration(0.5);
        robotDrive.setMaxOutput(1.0);
        elevatorBottomSwitch = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "BottomSwitch", elevatorBottomSwitch);
        
        elevatorTopSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "TopSwitch", elevatorTopSwitch);
        
        elevatorMotor = new WPI_TalonSRX(5);
        LiveWindow.addActuator("Elevator", "ElevatorMotor", elevatorMotor);
        elevatorMotor.setInverted(false);
        clawPiston = new DoubleSolenoid(1, 0, 1);
        LiveWindow.addActuator("Claw", "ClawPiston", clawPiston);
        
        clawMotor1 = new PWMVictorSPX(0);
        clawMotor2 = new PWMVictorSPX(1);
        clawMotor1.setInverted(true);
        clawMotors = new SpeedControllerGroup(clawMotor1, clawMotor2);
        LiveWindow.addActuator("Claw", "ClawMotor", clawMotors);
        clawMotors.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
