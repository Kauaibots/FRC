// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2465.Clyde;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro driveReplaceThisGyro;
    public static DoubleSolenoid driveLeftGearShift;
    public static DoubleSolenoid driveRightGearShift;
    public static WPI_TalonSRX driveTalonSRX1;
    public static WPI_TalonSRX driveTalonSRX2;
    public static WPI_TalonSRX driveTalonSRX3;
    public static WPI_TalonSRX driveTalonSRX4;
    public static RobotDrive driveRobotDrive41;
    public static Encoder elevatorEncoder;
    public static DigitalInput elevatorBottomSwitch;
    public static DigitalInput elevatorTopSwitch;
    public static SpeedController elevatorElevatorMotor;
    public static DoubleSolenoid clawClawLifter;
    public static SpeedController clawClawMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveReplaceThisGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drive", "ReplaceThisGyro", driveReplaceThisGyro);
        driveReplaceThisGyro.setSensitivity(0.007);
        driveLeftGearShift = new DoubleSolenoid(5, 2, 3);
        LiveWindow.addActuator("Drive", "LeftGearShift", driveLeftGearShift);
        
        driveRightGearShift = new DoubleSolenoid(5, 4, 5);
        LiveWindow.addActuator("Drive", "RightGearShift", driveRightGearShift);
        
        driveTalonSRX1 = new WPI_TalonSRX(1);
        
        
        driveTalonSRX2 = new WPI_TalonSRX(2);
        
        
        driveTalonSRX3 = new WPI_TalonSRX(3);
        
        
        driveTalonSRX4 = new WPI_TalonSRX(4);
        
        
        driveRobotDrive41 = new RobotDrive(driveTalonSRX1, driveTalonSRX2,
              driveTalonSRX3, driveTalonSRX4);
        
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        elevatorEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Encoder", elevatorEncoder);
        elevatorEncoder.setDistancePerPulse(1.0);
        elevatorEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorBottomSwitch = new DigitalInput(2);
        LiveWindow.addSensor("Elevator", "BottomSwitch", elevatorBottomSwitch);
        
        elevatorTopSwitch = new DigitalInput(3);
        LiveWindow.addSensor("Elevator", "TopSwitch", elevatorTopSwitch);
        
        elevatorElevatorMotor = new PWMTalonSRX(1);
        LiveWindow.addActuator("Elevator", "ElevatorMotor", (PWMTalonSRX) elevatorElevatorMotor);
        elevatorElevatorMotor.setInverted(false);
        clawClawLifter = new DoubleSolenoid(5, 0, 1);
        LiveWindow.addActuator("Claw", "ClawLifter", clawClawLifter);
        
        clawClawMotor = new PWMTalonSRX(2);
        LiveWindow.addActuator("Claw", "ClawMotor", (PWMTalonSRX) clawClawMotor);
        clawClawMotor.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
