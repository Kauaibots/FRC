// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2465.Clyde.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2465.Clyde.Robot;
import org.usfirst.frc2465.Clyde.RobotMap;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.PIDSubsystem;

/*
 	!!!!!!!!  This command is temporary and is meant to be replaced by a functioning PID controller  !!!!!!!!
 */
public class  RotateToAngle extends Command {
	
	double target_angle;
	boolean previousAutoRotate = false;
	int counter;

    public RotateToAngle(float rotationAngle) {
    	target_angle = rotationAngle;
        // Use requires() here to declare subsystem dependencies
        requires(Robot.drive);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	double speed = Math.abs(RobotMap.imu.getAngle() - target_angle) / 100.0;
    	
    	if(speed > 0.75) {
    		speed = 0.75;
    	}
    	
    	if (speed < 0.5 && speed > 0.3) {
    		speed = 0.5;
    	}
    	
    	if (speed < 0.3) {
    		speed = 0.3;
    	}
    	
    	if (RobotMap.imu.getAngle() > target_angle) {
    		Robot.drive.arcadeDrive(0, speed);
    	} else {
    		Robot.drive.arcadeDrive(0, -speed);
    	}
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        
    	if (Math.abs(RobotMap.imu.getAngle() - target_angle) < Robot.preferences.getAutoRotateOnTargetToleranceDegrees() && counter < 2) {
    		counter++;
    	}
    	else if(counter == 2) {
    		return true;
    	}
    	else {
    		counter = 0;
    		return false;
    	}
		return false;
    	
    	

    	
    	//return (Math.abs(RobotMap.imu.getAngle() - target_angle) < Robot.preferences.getAutoRotateOnTargetToleranceDegrees());
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.arcadeDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.drive.arcadeDrive(0, 0);
    }
}
