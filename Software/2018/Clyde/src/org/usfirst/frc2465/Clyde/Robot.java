// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Clyde;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2465.Clyde.commands.*;
import org.usfirst.frc2465.Clyde.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    
    SendableChooser startingPosition;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Elevator elevator;
    public static Claw claw;
    public static RobotPreferences preferences;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        elevator = new Elevator();
        claw = new Claw();
        
        preferences = new RobotPreferences();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

//Sets Auto
        autoChooser = new SendableChooser();
        autoChooser.addDefault("None", new AutonomousCommand());
        autoChooser.addObject("Pass Baseline", new _Baseline());
        autoChooser.addObject("Always Switch", new _Switch());
        autoChooser.addObject("Always Scale", new _Scale());
        autoChooser.addObject("Scale if on Side", new _ScaleSide());
        autoChooser.addObject("Calibrate Elevator", new CalibrateElevator());
        
        SmartDashboard.putData("Autonomous Mode", autoChooser);

        
        startingPosition = new SendableChooser();
        startingPosition.addDefault("Not Specified", RobotPreferences.startingPosition = 0);
        startingPosition.addObject("Left", RobotPreferences.startingPosition = 1);
        startingPosition.addObject("Middle", RobotPreferences.startingPosition = 2);
        startingPosition.addObject("Right", RobotPreferences.startingPosition = 3);

        SmartDashboard.putData("Starting Position", startingPosition);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
     //   SmartDashboard.putData("Auto mode", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	
        autoChooser = new SendableChooser();
        autoChooser.addDefault("None", new AutonomousCommand());
        autoChooser.addObject("Pass Baseline", new _Baseline());
        autoChooser.addObject("Always Switch", new _Switch());
        autoChooser.addObject("Always Scale", new _Scale());
        autoChooser.addObject("Scale if on Side", new _ScaleSide());
        autoChooser.addObject("Calibrate Elevator", new CalibrateElevator());
        
        SmartDashboard.putData("Autonomous Mode", autoChooser);
        
        
        startingPosition = new SendableChooser();
        startingPosition.addDefault("Not Specified", RobotPreferences.startingPosition = 0);
        startingPosition.addObject("Left", RobotPreferences.startingPosition = 1);
        startingPosition.addObject("Middle", RobotPreferences.startingPosition = 2);
        startingPosition.addObject("Right", RobotPreferences.startingPosition = 3);

        SmartDashboard.putData("Starting Position", startingPosition);
    	
        
        autonomousCommand = (Command) autoChooser.getSelected();
        autonomousCommand.start();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        Robot.elevator.updateDashboard();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        Robot.elevator.updateDashboard();
    }
}
