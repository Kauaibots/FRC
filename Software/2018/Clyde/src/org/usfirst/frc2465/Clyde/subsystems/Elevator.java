// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.Clyde.subsystems;

import org.usfirst.frc2465.Clyde.RobotMap;
import org.usfirst.frc2465.Clyde.commands.*;
import org.usfirst.frc2465.Clyde.commands.CalibrateElevator.State;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Elevator extends PIDSubsystem {

	public enum Motion {UP, DOWN, STOP};
	Motion motion;
	
	static final float SPEED = 0.2f;
	public float rotPerInch = 0.267f; //Change this value to the output of the latest calibration
	public float height = 79.375f; //!!Please measure more accurately and delete this when it is done!!  Length, in inches, between the lowest and highest position of the elevator
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder encoder = RobotMap.elevatorEncoder;
    private final DigitalInput bottomSwitch = RobotMap.elevatorBottomSwitch;
    private final DigitalInput topSwitch = RobotMap.elevatorTopSwitch;
    public final SpeedController elevatorMotor = RobotMap.elevatorMotor; //!!!Change to private when the elevator commands are finished. Was used in testing.

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Elevator", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Elevator", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    
    public boolean isBottom() {
    	return bottomSwitch.get();
    }
    
    public boolean isTop() {
    	return topSwitch.get();
    }
    
    public void setHome() {
    	encoder.reset();
    }
    
    public void setMotion(Motion motion) {
    	
    	if (getPIDController().isEnabled() == false){
    		if (motion == Motion.UP) {
    			elevatorMotor.set(SPEED); 
    		}
    		else if (motion == Motion.DOWN) {
    			elevatorMotor.set(-SPEED);
    		}
    		else if (motion == Motion.STOP) {
    			elevatorMotor.set(0);
    		}
    	}
    }
    
    public Motion getMotion() {
    	if (elevatorMotor.get() >= 0.05) {
    		return Motion.UP;
    	}
    	else  if (elevatorMotor.get() <= -0.05) {
    		return Motion.DOWN;
    	}
    	else  if (elevatorMotor.get() <= -0.05 && elevatorMotor.get() >= 0.05) {
    		return Motion.STOP;
    	}
		return motion;
    }
    
    //public float rotPerInch() {
    	
    //}

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return encoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        elevatorMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
