// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.StrongholdBot16;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

import org.usfirst.frc2465.StrongholdBot16.subsystems.AngleSensor;
import org.usfirst.frc2465.StrongholdBot16.subsystems.MaxbotixSensor;
import org.usfirst.frc2465.StrongholdBot16.subsystems.ProximitySensor;

import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput wristHighLimit;
    public static DigitalInput wristLowLimit;
    public static SpeedController wristSpeedController;
    public static DigitalInput wristAngleData;
    public static DigitalOutput wristAngleClock;
    public static DigitalOutput wristAngleChipSelect;
    public static AngleSensor wristAngleSensor;
    public static DigitalInput elbowHighLimit;
    public static DigitalInput elbowLowLimit;
    public static SpeedController elbowSpeedController;
    public static DigitalInput elbowAngleData;
    public static DigitalOutput elbowAngleClock;
    public static DigitalOutput elbowAngleChipSelect;
    public static AngleSensor elbowAngleSensor;    
    public static DigitalInput shoulderHighLimit;
    public static DigitalInput shoulderLowLimit;
    public static SpeedController shoulderSpeedController;
    public static DigitalInput shoulderAngleData;
    public static DigitalOutput shoulderAngleClock;
    public static DigitalOutput shoulderAngleChipSelect;
    public static AngleSensor shoulderAngleSensor;        
    public static AnalogInput turretHighLimit;
    public static AnalogInput turretLowLimit;
    public static DigitalInput turretHomeLimit;
    public static SpeedController turretSpeedController;
    public static DigitalInput turretEncoderA;
    public static DigitalInput turretEncoderB;
    public static DigitalInput turretEncoderIndex;
    public static Encoder turretEncoder;
    public static DigitalInput winchLimit;
    public static Relay winchMotorRelay;
    public static AnalogInput ultrasonicFrontInput;
    public static AnalogInput ultrasonicBackInput;
    public static AnalogInput ultrasonicLeftInput;
    public static AnalogInput ultrasonicRightInput;
    public static MaxbotixSensor ultrasonicFrontSensor;
    public static MaxbotixSensor ultrasonicBackSensor;
    public static MaxbotixSensor ultrasonicLeftSensor;
    public static MaxbotixSensor ultrasonicRightSensor;
    public static AnalogInput infraredFrontInput;
    public static AnalogInput infraredBackInput;
    public static Servo visionServoH;
    public static Servo visionServoV;
    public static Relay visionRingLightRelay;
    public static Servo lIDARServo;
    public static SerialPort serialPort;
    public static AHRS imu;
    public static CANTalon driveLeftFrontSC;
    public static CANTalon driveRightFrontSC;
    public static CANTalon driveLeftRearSC;
    public static CANTalon driveRightRearSC;
    public static RobotDrive robotDrive;
    public static ProximitySensor infraredFrontSensor;
    public static ProximitySensor infraredBackSensor;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        wristHighLimit = new DigitalInput(13);
        LiveWindow.addSensor("Wrist", "HighLimit", wristHighLimit);
        
        wristLowLimit = new DigitalInput(18);
        LiveWindow.addSensor("Wrist", "LowLimit", wristLowLimit);
        
        wristSpeedController = new Talon(0);
        LiveWindow.addActuator("Wrist", "SpeedController", (Talon) wristSpeedController);
        
        wristAngleData = new DigitalInput(0);
        LiveWindow.addSensor("Wrist", "AngleData", wristAngleData);
        
        wristAngleClock = new DigitalOutput(1);
        LiveWindow.addActuator("Wrist", "AngleClock", wristAngleClock);
        
        wristAngleChipSelect = new DigitalOutput(2);
        LiveWindow.addActuator("Wrist", "AngleChipSelect", wristAngleChipSelect);
        
        wristAngleSensor = new AngleSensor(wristAngleData, wristAngleChipSelect, wristAngleClock);
        LiveWindow.addActuator("Wrist", "AngleSensor", wristAngleSensor);
        
        elbowHighLimit = new DigitalInput(19);
        LiveWindow.addSensor("Elbow", "HighLimit", elbowHighLimit);
        
        elbowLowLimit = new DigitalInput(20);
        LiveWindow.addSensor("Elbow", "LowLimit", elbowLowLimit);
        
        elbowSpeedController = new Talon(1);
        LiveWindow.addActuator("Elbow", "SpeedController", (Talon) elbowSpeedController);
        
        elbowAngleData = new DigitalInput(3);
        LiveWindow.addSensor("Elbow", "AngleData", elbowAngleData);
        
        elbowAngleClock = new DigitalOutput(4);
        LiveWindow.addActuator("Elbow", "AngleClock", elbowAngleClock);
        
        elbowAngleChipSelect = new DigitalOutput(5);
        LiveWindow.addActuator("Elbow", "AngleChipSelect", elbowAngleChipSelect);
        
        elbowAngleSensor = new AngleSensor(elbowAngleData, elbowAngleChipSelect, elbowAngleClock);
        LiveWindow.addActuator("Elbow", "AngleSensor", elbowAngleSensor);
        
        shoulderHighLimit = new DigitalInput(21);
        LiveWindow.addSensor("Shoulder", "HighLimit", shoulderHighLimit);
        
        shoulderLowLimit = new DigitalInput(22);
        LiveWindow.addSensor("Shoulder", "LowLimit", shoulderLowLimit);
        
        shoulderSpeedController = new Talon(2);
        LiveWindow.addActuator("Shoulder", "SpeedController", (Talon) shoulderSpeedController);
        
        shoulderAngleData = new DigitalInput(6);
        LiveWindow.addSensor("Shoulder", "AngleData", shoulderAngleData);
        
        shoulderAngleClock = new DigitalOutput(7);
        LiveWindow.addActuator("Shoulder", "AngleClock", shoulderAngleClock);
        
        shoulderAngleChipSelect = new DigitalOutput(8);
        LiveWindow.addActuator("Shoulder", "AngleChipSelect", shoulderAngleChipSelect);
        
        shoulderAngleSensor = new AngleSensor(shoulderAngleData, shoulderAngleChipSelect, shoulderAngleClock);
        LiveWindow.addActuator("Shoulder", "AngleSensor", shoulderAngleSensor);                
        
        turretHighLimit = new AnalogInput(6);
        LiveWindow.addSensor("Turret", "HighLimit", turretHighLimit);
        
        turretLowLimit = new AnalogInput(7);
        LiveWindow.addSensor("Turret", "LowLimit", turretLowLimit);
        
        turretHomeLimit = new DigitalInput(9);
        LiveWindow.addSensor("Turret", "HomeLimit", turretHomeLimit);
        
        turretSpeedController = new Talon(3);
        LiveWindow.addActuator("Turret", "SpeedController", (Talon) turretSpeedController);
        
        turretEncoderA = new DigitalInput(10);
        LiveWindow.addSensor("Turret", "AngleData", turretEncoderA);
        
        turretEncoderB = new DigitalInput(11);
        LiveWindow.addActuator("Turret", "AngleClock", turretEncoderB);
        
        turretEncoderIndex = new DigitalInput(12);
        LiveWindow.addActuator("Turret", "AngleChipSelect", turretEncoderIndex);
        
        turretEncoder = new Encoder(turretEncoderA, turretEncoderB, turretEncoderIndex);
        LiveWindow.addSensor("Turret", "Encoder", turretEncoder);
        
        winchLimit = new DigitalInput(23);
        LiveWindow.addSensor("Winch", "Limit", winchLimit);
        
        winchMotorRelay = new Relay(0);
        LiveWindow.addActuator("Winch", "MotorRelay", winchMotorRelay);
        
        ultrasonicFrontInput = new AnalogInput(2);
        LiveWindow.addSensor("Ultrasonic", "FrontInput", ultrasonicFrontInput);
        
        ultrasonicBackInput = new AnalogInput(3);
        LiveWindow.addSensor("Ultrasonic", "BackInput", ultrasonicBackInput);
        
        ultrasonicLeftInput = new AnalogInput(1);
        LiveWindow.addSensor("Ultrasonic", "LeftInput", ultrasonicLeftInput);
        
        ultrasonicRightInput = new AnalogInput(0);
        LiveWindow.addSensor("Ultrasonic", "RightInput", ultrasonicRightInput);
        
        ultrasonicFrontSensor = new MaxbotixSensor(ultrasonicFrontInput);
        LiveWindow.addSensor("Ultrasonic", "FrontSensor", ultrasonicFrontSensor);
        
        ultrasonicBackSensor = new MaxbotixSensor(ultrasonicBackInput);
        LiveWindow.addSensor("Ultrasonic", "BackSensor", ultrasonicBackSensor);
        
        ultrasonicLeftSensor = new MaxbotixSensor(ultrasonicLeftInput);
        LiveWindow.addSensor("Ultrasonic", "LeftSensor", ultrasonicLeftSensor);

        ultrasonicRightSensor = new MaxbotixSensor(ultrasonicRightInput);
        LiveWindow.addSensor("Ultrasonic", "RightSensor", ultrasonicRightSensor);
        
        infraredFrontInput = new AnalogInput(4);
        LiveWindow.addSensor("Infrared", "FrontInput", infraredFrontInput);
        
        infraredBackInput = new AnalogInput(5);
        LiveWindow.addSensor("Infrared", "BackInput", infraredBackInput);
        
        infraredFrontSensor = new ProximitySensor(infraredFrontInput, ProximitySensor.kMediumRange);
        LiveWindow.addSensor("Infrared", "FrontSensor", infraredFrontSensor);

        infraredBackSensor = new ProximitySensor(infraredBackInput, ProximitySensor.kMediumRange);
        LiveWindow.addSensor("Infrared", "BackSensor", infraredBackSensor);
        
        visionServoH = new Servo(5);
        LiveWindow.addActuator("Vision", "ServoH", visionServoH);
        
        visionServoV = new Servo(6);
        LiveWindow.addActuator("Vision", "ServoV", visionServoV);
        
        visionRingLightRelay = new Relay(1);
        LiveWindow.addActuator("Vision", "RingLightRelay", visionRingLightRelay);
        
        lIDARServo = new Servo(4);
        LiveWindow.addActuator("LIDAR", "Servo", lIDARServo);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
