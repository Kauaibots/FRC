// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.StrongholdBot16.subsystems;

import org.usfirst.frc2465.StrongholdBot16.RobotMap;
import org.usfirst.frc2465.StrongholdBot16.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Wedge extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput highLimit = RobotMap.wedgeHighLimit;
    DigitalInput lowLimit = RobotMap.wedgeLowLimit;
    SpeedController speedController = RobotMap.wedgeSpeedController;
    
    public enum WedgePosition {
        kUp(0),
        kDown(1),
        kUnknown(2);
        
        private int value;
        
        private WedgePosition(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }    
    }    
   
    WedgePosition position;
    
    public Wedge(){
    	position = WedgePosition.kUnknown;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new DoWedge(false));
    }
    
    public boolean isUp(){
    	return (!lowLimit.get() || position == WedgePosition.kUp);
    }
    
    public boolean isDown(){
    	return (!highLimit.get() || position == WedgePosition.kDown);    
    }
    
    public void setPosition(boolean up){
    	if(up){
    		position = WedgePosition.kUp;
    	}
    	else{
    		position = WedgePosition.kDown;
    	}
    }
    
    public void setMotor(double speed){
    	speedController.set(speed);
    }
    
}

