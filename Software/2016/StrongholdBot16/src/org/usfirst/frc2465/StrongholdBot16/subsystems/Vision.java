// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.StrongholdBot16.subsystems;

import java.io.UnsupportedEncodingException;

import org.usfirst.frc2465.StrongholdBot16.RobotMap;
import org.usfirst.frc2465.StrongholdBot16.commands.*;
import org.usfirst.frc2465.StrongholdBot16.subsystems.Ultrasonic;
import org.usfirst.frc2465.StrongholdBot16.subsystems.Ultrasonic.IOThread;

import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;


/**
 *
 */
public class Vision extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay ringLightRelay = RobotMap.visionRingLightRelay;    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    PingThread ping_thread;
    NetworkTable table;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public Vision() {
    	table = NetworkTable.getTable("videoproc");

        this.ping_thread = new PingThread();
        this.ping_thread.start();
    }
    
    class PingThread implements Runnable {

        Thread              m_thread;
        boolean             stop;
        boolean             connected;
        static final double    timeout_seconds = 1.0;
        
        public void start() {
            m_thread = new Thread(this);
            m_thread.start();
            stop = false;
            connected = false;
        }
        public void run() {
        	NetworkTable table = NetworkTable.getTable("videoproc");
        	while (!stop) {
        		/* Read current ping response */
        		double curr_ping_response = table.getNumber("ping_response",-1.0);
        		/* Increment by one (module 100) */
        		curr_ping_response += 1;
        		double next_ping_value = (double)((int)curr_ping_response)%100;
        		/* Send the ping */
        		table.putNumber("ping",  next_ping_value);
        		double timestamp = Timer.getFPGATimestamp();
        		boolean ping_ok = false;
        		while ( !ping_ok && 
        				((Timer.getFPGATimestamp() - timestamp) < timeout_seconds)) {
        			Timer.delay(.02);
        			if ( table.getNumber("ping_response",-1.0) == next_ping_value) {
        				ping_ok = true;
        			}
        		}
        		connected = ping_ok;
                Timer.delay(.5);
        	}
        }
   
        public void stop() {
        	stop = true;
        }    
    }
    
    public boolean isConnected() {
    	return this.ping_thread.connected;
    }
    
    static final int ALG_TOWER_AND_SHIELDS_BLUE = 4;
    static final int ALG_TOWER_AND_SHIELDS_RED = 5;
    
    public enum DetectAlgorithm {
    	TOWER_AND_SHIELDS_BLUE,
    	TOWER_AND_SHIELDS_RED    	
    };

    static final int CAMERA_FRONT = 0;
    static final int CAMERA_REAR = 1;
    
    public enum CameraSelector {
    	FRONT_CAMERA,
    	REAR_CAMERA
    }
    
    public boolean isDetecting() {
    	return table.getBoolean("algorithm_active",false); 
    }
    
    public boolean isStreamOutEnabled() {
    	return table.getBoolean("enable_stream_out", false);
    }

    public void enableStreamOut(boolean enable) {
    	table.putBoolean("enable_stream_out", enable);
    }
    
    public boolean isFileOutEnabled() {
    	return table.getBoolean("enable_file_out", false);
    }
    
    public void enableFileOut(boolean enable) {
    	table.putBoolean("enable_file_out", enable);
    }
    
    public double getLastAlgorithmTimeUs() {
    	return table.getNumber("last_algorithm_time_us",0.0);
    }
    
    public double getLastReadTimeUs() {
    	return table.getNumber("last_read_time_us",0.0);
    }
    
    public double getLastWriteTimeUs() {
    	return table.getNumber("last_write_time_us",0.0);
    }
    
    public DetectAlgorithm getCurrentDetectAlgorithm() {
    	int value = (int)table.getNumber("algorithm",(double)ALG_TOWER_AND_SHIELDS_BLUE);
    	if ( value == ALG_TOWER_AND_SHIELDS_BLUE ) {
    		return DetectAlgorithm.TOWER_AND_SHIELDS_BLUE;
    	} else {
    		return DetectAlgorithm.TOWER_AND_SHIELDS_RED;
    	}
    }
    
    public void enableDetection( DetectAlgorithm alg, boolean enable_stream, boolean enable_file) {
    	double algorithm = (double)ALG_TOWER_AND_SHIELDS_BLUE;
    	if ( alg == DetectAlgorithm.TOWER_AND_SHIELDS_RED ) {
    		algorithm = (double)ALG_TOWER_AND_SHIELDS_RED;
    	}
    	table.putNumber("algorithm", algorithm);
    	table.putBoolean("enable_algorithm", true);
    	table.putBoolean("enable_stream_out",  enable_stream);
    	table.putBoolean("enable_file_out",  enable_file);
    }
    
    public void disableDetection() {
    	table.putBoolean("enable_algorithm", false);
    	table.putBoolean("enable_stream_out",  false);
    	table.putBoolean("enable_file_out",  false);
    }
    
    public void selectCamera(CameraSelector s) {
    	int camera = CAMERA_FRONT;
    	if ( s == CameraSelector.REAR_CAMERA ) {
    		camera = CAMERA_REAR;
    	}
    	table.putNumber("input_camera", (double)camera);
    }
    
    public class DetectionInfo {
    	public boolean detected;
    	public double distance_inches;
    	public double angle_degrees;
    	public double snr;
    	public int successive_detection_count;
    	public DetectionInfo(){
    		detected = false;
    		distance_inches = 0.0;
    		angle_degrees = 0.0;
    		snr = 0.0;
    		successive_detection_count = 0;
    	}
    }
    
    public CameraSelector getCurrentCamera() {
    	int camera = (int)table.getNumber("input_camera",0);
    	if ( camera == CAMERA_REAR ) {
    		return CameraSelector.REAR_CAMERA;
    	}
    	return CameraSelector.FRONT_CAMERA;
    }
    
    public void getTowerDetectionInfo( DetectionInfo tower ) {
    	tower.detected = table.getBoolean("tower_detected",false);
    	tower.distance_inches = table.getNumber("tower_distance_inches",0.0);
    	tower.angle_degrees = table.getNumber("tower_angle_degrees",0.0);
    	tower.snr = table.getNumber("tower_snr",0.0);
    	tower.successive_detection_count = (int)table.getNumber("tower_successive_detection_count",0.0);
    }

    public void getTargetDetectionInfo( DetectionInfo target ) {
    	target.detected = table.getBoolean("target_detected",false);
    	target.distance_inches = table.getNumber("target_distance_inches",0.0);
    	target.angle_degrees = table.getNumber("target_angle_degrees",0.0);
    	target.snr = table.getNumber("target_snr",0.0);
    	target.successive_detection_count = (int)table.getNumber("target_successive_detection_count",0.0);
    }

    public void getShieldDetectionInfo( DetectionInfo shield ) {
    	shield.detected = table.getBoolean("shield_detected",false);
    	shield.distance_inches = table.getNumber("shield_distance_inches",0.0);
    	shield.angle_degrees = table.getNumber("shield_angle_degrees",0.0);
    	shield.snr = table.getNumber("shield_snr",0.0);
    	shield.successive_detection_count = (int)table.getNumber("shield_successive_detection_count",0.0);
    }
    
    public String getHostname() {
    	String hostname = table.getString("hostname","Unknown");
    	return hostname;
    }
    
    public String getIpAddress() {
    	String ip = table.getString("ip","Unknown");
    	return ip;
    }
}

