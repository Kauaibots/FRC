// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2465.StrongholdBot16;

import org.usfirst.frc2465.StrongholdBot16.commands.AutoRotatePIDTune;
import org.usfirst.frc2465.StrongholdBot16.commands.AutoSpeedPIDTune;
import org.usfirst.frc2465.StrongholdBot16.commands.AutonomousCommand;
import org.usfirst.frc2465.StrongholdBot16.commands.BallGrab;
import org.usfirst.frc2465.StrongholdBot16.commands.DoWedge;
import org.usfirst.frc2465.StrongholdBot16.commands.LowBar;
import org.usfirst.frc2465.StrongholdBot16.commands.DriveDistance;
import org.usfirst.frc2465.StrongholdBot16.commands.StickDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Trigger;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public Joystick opJoystick;
    public Joystick lights;
    public JoystickButton lowbarButton;
    public JoystickButton ballGrabButton;
    public JoystickButton scoreWedgeButton;
    public JoystickButton autoSpeedPIDTuneButton;
    public JoystickButton autoRotatePIDTuneButton;
    public Trigger t;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        lights =  new Joystick(2);
    	driver = new Joystick(1);
        opJoystick= new Joystick(0);
        
        //lowbarButton = new JoystickButton(driver, 11);
        //lowbarButton.whenPressed(new LowBar());
        //ballGrabButton = new JoystickButton(driver, 2);
        //ballGrabButton.whenPressed(new BallGrab());
	    //scoreWedgeButton = new JoystickButton(driver,5);
	    //scoreWedgeButton.whileHeld(new DoWedge(true));
	    autoSpeedPIDTuneButton = new JoystickButton(driver,10);
	    autoSpeedPIDTuneButton.toggleWhenPressed(new AutoSpeedPIDTune());
	    autoRotatePIDTuneButton = new JoystickButton(driver,11);
	    autoRotatePIDTuneButton.toggleWhenPressed(new AutoRotatePIDTune());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("StickDrive", new StickDrive());
        
        SmartDashboard.putData("DriveForwardTwelveInches", new DriveDistance(31.4f, 0.1f, 0.0f));
        
        SmartDashboard.putData("LowBar", new LowBar());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriver() {
        return driver;
    }

    public Joystick getLights() {
        return lights;
    }
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

